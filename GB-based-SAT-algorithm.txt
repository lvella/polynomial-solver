The following is a work-in-progress algorithm that I think can be used to prove
SAT or UNSAT for a system of polynomial equalities and inequalities. The approach
is to find the radical ideal for the equalities, and eliminate from it's variety all
the solutions that are in conflict with the inequalities. If at any point we end
up with an empty variety, we can declare UNSAT, and only search for roots in the
field when all the conflicting factors have been eliminated.

This approach differs from searching the solution space for a SAT instance as it
should not require an exhaustive search in the entire space for deciding on UNSAT
due to conflict with the negating clauses (it still needs exhaustive search if the
ground field is not algebraically closed, so that the polynomials might not have
roots in the field).

0. Put the (in)equations in normal form (i.e. f = g to f - g = 0 and h ≠ p to h - p ≠ 0)
1. Calculate a generating set for the radical of the ideal generated by polynomials f = 0
   (I am not entirely sure how to do it, but it seems an algorithm is provided in [1],
   maybe something more specific for finite fields can be worked out from [3])
2. GB ← calculate Gröbner Basis of the generating set of the radical ideal
   (probably it is already a GB due to the radical algorithm)
3. for every polynomial p ≠ 0, do:
    3.1. r ← reduction of r by GB
    3.2. if r = 0, then declare UNSAT, because every solution that satisfy every f = 0 will
        also make p = 0
    3.3. for every polynomial q in GB:
        3.3.1. while gdc(q, r) ≠ 1: 
            (if q is squarefree (and I don't know if the radical calculation algorithm
            guarantees it) this loop has only one iteration)
            3.3.1.1. q ← q / gcd(q, r)
        3.3.2. if q is constant, declare UNSAT, because it can no longer be 0
    3.4(maybe). GB ← recalculate Gröbner Basis, because I am not sure if it is still a GB after 3.3
    3.5. if there is a constant in GB, declare UNSAT, because it can not be 0
4. If the field is algebraically closed, then declare SAT, because we are sure to be able
   to find roots in the remaining GB system.
5. Transform the GB to lexicographical order, if not already
   (there is an algorithm called Gröbner Walk for that, I am not sure it is the best;
   [2] says this conversion is the bottleneck for solving polynomial systems)
5. Try to solve the GB system, possibly using backtracking
    5.1. If any solution is found, then declare SAT, otherwise UNSAT
         (UNSAT can happen if any of the polynomials has not roots in the field)

References:
[1]: "Gröbner Bases and Primary Decomposition of Polynomial Ideals" (1988)
     by Gianni, Tragger and Zacharias
[2]: "Solving Polynomial Systems over Finite Fields:
     Algorithms, Implementation and Applications" (2013) by Chenqi Mou
[3]: "On square-free factorization of multivariate polynomials over a finite field" (1997)
     by Laurent Bernardin